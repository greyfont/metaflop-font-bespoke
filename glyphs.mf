%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                                                         %
% Bespoke v1.7                                                            %
% a Metaflop-font © 2012 by Simon Egli, Marco MŸller                      %
% thanks to Teofilo Furtado                                               %
% www.metaflop.com                                                        %
%                                                                         %
% This program is free software: you can redistribute it and/or modify    %
% it under the terms of the GNU General Public License as published by    %
% the Free Software Foundation, either version 3 of the License, or       %
% (at your option) any later version.                                     %
%                                                                         %
% This program is distributed in the hope that it will be useful,         %
% but WITHOUT ANY WARRANTY; without even the implied warranty of          % 
% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the            % 
% GNU General Public License for more details.                            %
%                                                                         %
% You should have received a copy of the GNU General Public License       %
% along with this program. If not, see <http://www.gnu.org/licenses/>.    %
%                                                                         %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


% contrast limit %
%if (cont > 1.5):
%px#:=0.2pt#;
%fi
py#:=px#;

% Aditional parameters / hidden parameter list
barheight#:=bar*cap#;	% Cross Bar (Upper)
leftstemloc#:=0.2u#+s#+((cont*px#)/2);	% position of left stem
letter_fit#:=0.0u#; % amount of letter fit
shrink_fit:=.0u#;  % amount of shrink fit

space:=0.0; % letterspacing (0 = compress)

% sidebearings on / off
% definition of left and right-side bearings. To use in glyph after beginchar: normal_adjust_fit(-1.5u#,-1.5u#);

if (sidebearing=1):
 def normal_adjust_fit(expr left_adjustment,right_adjustment) = 
 l := -hround(left_adjustment*hppp)-letter_fit#; 
 interim xoffset := -l; charwd := charwd+2letter_fit#+left_adjustment+right_adjustment; 
 r := l+hround(charwd*hppp)-shrink_fit;
 w := r-hround(right_adjustment*hppp)-letter_fit#; enddef;
fi

def endchar =
 scantokens extra_endchar;
 chardx:=w;
 shipit;
 endgroup enddef;	

mode=luxo;

%mode_def flop =
%proofing:=1;
%fontmaking:=1;
%pixels_per_inch:=2000;
%tracingtitles:=1;
%title:=1;
%titlefont:=1;
%enddef;
%mode=flop;

mode_setup;

%pixel conversions
% metafont needs these pixel definitions to calculate the final dimensions of the parameter values
define_pixels(s,u);
define_blacker_pixels(px,py);
define_good_x_pixels(leftstemloc, letter_fit);
define_good_y_pixels(asc);
define_good_y_pixels(des);
define_good_y_pixels(cap);
define_good_y_pixels(mean);
define_good_y_pixels(corner);
define_corrected_pixels(o);

% Begin Charater macro
def beginadjchar(expr code, unit_width, h, d) =
 beginchar(code,unit_width*u#+s#,h,d);
pickup adj_pen;
enddef;

def beginadjichar(expr code, unit_width, h, d) =
 beginchar(code,2(unit_width*u#+s#+(cont*px#)/2),h,d);
pickup adj_pen;
enddef;

% Box correction above incx .5

if (incx > .5):
corr:=(1-incx)+.5;
else: corr:=1;
fi

%Fixed pen settings
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
pickup pencircle xscaled px yscaled py rotated 15;
adj_pen:=savepen;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Pen angle macros
def angledpen(expr a,b)=
-(90-((180-(angle(a-b)))/2))   enddef; 

streightpensize:=contrst*px;
serif:=serifsize*u;

def verticalpensize(expr a,b)=
contrst*px/sind (90-(-(90-((180-angle(a-b))/2)) ))*sind 90 enddef;

def incxb=
incx/sind 90*sind 56 enddef;

def incxs=
incx/sind 90*sind 34 enddef;

def angb =
arcsin ((1/(sind 90)*sind 56)/(incx/((incx/sind 90)*sind 56))) enddef;

vardef diag_ratio(expr a,b,y,c) =
numeric aa_, bb_, cc_; bb_=b/y; cc_=c/y; aa_=a*a-bb_*bb_;
(a*(cc_++sqrt aa_)-bb_*cc_)/aa_ enddef;


% Superness macros
%%Left curves (superness)
def super_quarterl(suffix i,j,k) =
 z.i{0,y.j-y.i}
...(superness[x.j,x.i],superness[y.i,y.j]){z.j-z.i}
...z.j{x.k-x.i,0} enddef;

%% Right curves (superness)
def super_quarterr(suffix i,j,k) =
z.j{x.k-x.i,0}
...(superness[x.j,x.k],superness[y.k,y.j]){z.k-z.j}
...z.k{0,y.k-y.j} enddef;


def super_ql(suffix i,j) =
 z.i{0,y.j-y.i}
...(superness[x.j,x.i],superness[y.i,y.j]){z.j-z.i}...z.j{x.j-x.i,0} enddef;

%% Right curves (superness)
def super_qr(suffix j,k) =
z.j{x.k-x.j,0}
...(superness[x.j,x.k],superness[y.k,y.j]){z.k-z.j}
...z.k{0,y.k-y.j} enddef;

%% Right interior curves (superness)
def super_quarterri(suffix i,j,k) =
z.j{x.k-x.i,0}
...(supernessi[x.j,x.k],supernessi[y.k,y.j]){z.k-z.j}
...z.k{0,y.k-y.j} enddef;

%% Left interior curves (superness)
def super_quarterli(suffix i,j,k) =
 z.i{0,y.j-y.i}
...(supernessi[x.j,x.i],supernessi[y.i,y.j]){z.j-z.i}
...z.j{x.k-x.i,0} enddef;
% glyph input %
input glyphs/uc/A
input glyphs/uc/B
input glyphs/uc/C
input glyphs/uc/D
input glyphs/uc/E
input glyphs/uc/F
input glyphs/uc/G
input glyphs/uc/H
input glyphs/uc/I 
input glyphs/uc/J
input glyphs/uc/K
input glyphs/uc/L
input glyphs/uc/M
input glyphs/uc/N
input glyphs/uc/O
input glyphs/uc/P
input glyphs/uc/Q
input glyphs/uc/R
input glyphs/uc/S
input glyphs/uc/T
input glyphs/uc/U
input glyphs/uc/V
input glyphs/uc/W
input glyphs/uc/X
input glyphs/uc/Y
input glyphs/uc/Z

input glyphs/lc/a_lc
input glyphs/lc/b_lc
input glyphs/lc/c_lc
input glyphs/lc/d_lc
input glyphs/lc/e_lc
input glyphs/lc/f_lc
input glyphs/lc/g_lc
input glyphs/lc/h_lc
input glyphs/lc/i_lc
input glyphs/lc/j_lc
input glyphs/lc/k_lc
input glyphs/lc/l_lc
input glyphs/lc/m_lc
input glyphs/lc/n_lc
input glyphs/lc/o_lc
input glyphs/lc/p_lc
input glyphs/lc/q_lc
input glyphs/lc/r_lc
input glyphs/lc/s_lc
input glyphs/lc/t_lc
input glyphs/lc/u_lc
input glyphs/lc/v_lc
input glyphs/lc/w_lc
input glyphs/lc/x_lc
input glyphs/lc/y_lc
input glyphs/lc/z_lc

input glyphs/num/0
input glyphs/num/1
input glyphs/num/2
input glyphs/num/3
input glyphs/num/4
input glyphs/num/5
input glyphs/num/6
input glyphs/num/7
input glyphs/num/8
input glyphs/num/9

input glyphs/punct/comma
%input glyphs/punct/colon
input glyphs/punct/semicolon
input glyphs/punct/period
input glyphs/punct/exclam
 input glyphs/punct/space

font_quad:=10u#+0s#;
font_normal_space:=3u#+0s#;
font_normal_stretch:=0u#;
font_normal_shrink:=0u#;

% ligtable upper case %
% kerning pairs Learn FONTLAB Fast p. 99 / page 316 MetaFontBook

ligtable "A": 
"C" kern +0.0u#, "G" kern +0.0u#, "O" kern +0.0u#, "Q" kern +0.0u#, 
"S" kern +0.0u#, "T" kern -0.4u#, "U" kern +0.0u#, "Z" kern +0.2u#, 
"V" kern -0.1u#, "W" kern -0.1u#, "Y" kern -0.1u#,
"a" kern +0.1u#, "c" kern +0.1u#, "d" kern +0.1u#, "e" kern +0.1u#, "g" kern +0.1u#, "o" kern +0.1u#, "q" kern +0.1u#,
"s" kern +0.1u#, "t" kern -0.0u#, "u" kern -0.0u#, 
"v" kern -0.0u#, "w" kern -0.0u#, "y" kern -0.0u#;
ligtable "B":
"V" kern +0.0u#, "W" kern +0.0u#, "Y" kern +0.0u#;
ligtable "C":
"T" kern +0.0u#, 
"V" kern +0.2u#, "W" kern +0.2u#, "Y" kern +0.2u#;
ligtable "D":
"A" kern +0.0u#, "J" kern -0.1u#, 
"V" kern +0.0u#, "W" kern +0.0u#, "Y" kern +0.0u#;
ligtable "F":
"A" kern -0.3u#, "J" kern -0.6u#, "T" kern +0.2u#, 
"C" kern -0.1u#, "G" kern -0.1u#, "O" kern -0.1u#, "Q" kern -0.1u#,
"V" kern +0.2u#, "W" kern +0.2u#, "Y" kern +0.2u#,
"a" kern -0.1u#, "c" kern -0.0u#, "d" kern -0.0u#, "e" kern -0.0u#, "g" kern -0.0u#, "o" kern -0.0u#, "q" kern -0.0u#,
"r" kern -0.0u#, "s" kern -0.0u#, "t" kern -0.0u#, "u" kern -0.0u#, 
"v" kern -0.0u#, "w" kern -0.0u#, "y" kern -0.0u#;
ligtable "G":
"V" kern +0.0u#, "W" kern +0.0u#, "Y" kern +0.0u#;
ligtable "K":
"C" kern -0.2u#, "G" kern -0.2u#, "O" kern -0.2u#, "Q" kern -0.2u#, 
"a" kern -0.1u#, "c" kern -0.1u#, "d" kern -0.1u#, "e" kern -0.1u#, "g" kern -0.1u#, "o" kern -0.1u#, "q" kern -0.1u#,
"v" kern -0.1u#, "w" kern -0.1u#, "y" kern -0.1u#;
ligtable "L":
"A" kern +0.2u#, "T" kern -0.6u#, 
"C" kern -0.2u#, "G" kern -0.2u#, "O" kern -0.2u#, "Q" kern -0.2u#,
"V" kern -0.5u#, "W" kern -0.5u#, "Y" kern -0.5u#,
"a" kern -0.0u#, "c" kern -0.0u#, "d" kern -0.0u#, "e" kern -0.0u#, "g" kern -0.0u#, "o" kern -0.0u#, "q" kern -0.0u#,
"v" kern -0.1u#, "w" kern -0.1u#, "y" kern -0.1u#;
ligtable "O":
"A" kern +0.0u#, "T" kern -0.1u#,
"V" kern +0.0u#, "W" kern +0.0u#, "Y" kern -0.1u#;
ligtable "P":
"A" kern -0.3u#, "J" kern -0.8u#, "T" kern -0.1u#, 
"V" kern +0.0u#, "W" kern +0.0u#, "Y" kern +0.0u#,
"a" kern -0.1u#, "c" kern -0.1u#, "d" kern -0.1u#, "e" kern -0.1u#, "g" kern -0.1u#, "o" kern -0.1u#, "q" kern -0.1u#,
"s" kern -0.0u#,
"v" kern +0.1u#, "w" kern +0.1u#, "y" kern +0.1u#;
ligtable "Q":
"A" kern +0.0u#, "T" kern -0.1u#,
"V" kern +0.0u#, "W" kern +0.0u#, "Y" kern -0.1u#;
ligtable "R":
"A" kern -0.1u#, "T" kern -0.1u#, 
"V" kern +0.0u#, "W" kern +0.0u#, "Y" kern +0.0u#,
"a" kern -0.0u#, "c" kern -0.0u#, "d" kern -0.0u#, "e" kern -0.0u#, "g" kern -0.0u#, "o" kern -0.0u#, "q" kern -0.0u#,
"s" kern -0.0u#,
"v" kern -0.0u#, "w" kern -0.0u#, "y" kern -0.0u#;
ligtable "S":
"T" kern +0.0u#, 
"V" kern +0.0u#, "W" kern +0.0u#, "Y" kern +0.0u#,
"v" kern -0.0u#, "w" kern -0.0u#, "y" kern -0.0u#;
ligtable "T":
"A" kern -0.4u#, "F" kern +0.0u#, "T" kern +0.2u#, 
"C" kern -0.1u#, "G" kern -0.1u#, "O" kern -0.1u#, "Q" kern -0.1u#,
"a" kern -0.3u#, "c" kern -0.3u#, "d" kern -0.3u#, "e" kern -0.3u#, "g" kern -0.3u#, "o" kern -0.3u#, "q" kern -0.3u#,
"n" kern -0.3u#, "m" kern -0.3u#, "p" kern -0.3u#,
"r" kern -0.3u#, "s" kern -0.3u#, "u" kern -0.3u#, "x" kern -0.3u#,
"v" kern -0.3u#, "w" kern -0.3u#, "y" kern -0.3u#, "z" kern -0.3u#;
ligtable "V":
"A" kern -0.1u#, 
"C" kern +0.0u#, "G" kern +0.0u#, "O" kern +0.0u#, "Q" kern +0.0u#,
"a" kern -0.2u#, "c" kern -0.1u#, "d" kern -0.1u#, "e" kern -0.1u#, "g" kern -0.1u#, "o" kern -0.1u#, "q" kern -0.1u#,
"n" kern -0.1u#, "m" kern -0.1u#, "p" kern -0.1u#,
"r" kern -0.1u#, "s" kern -0.1u#, "u" kern -0.1u#, "x" kern -0.1u#,
"v" kern -0.0u#, "w" kern -0.0u#, "y" kern -0.0u#, "z" kern -0.0u#;
ligtable "W":
"A" kern -0.1u#, 
"C" kern +0.0u#, "G" kern +0.0u#, "O" kern +0.0u#, "Q" kern +0.0u#,
"a" kern -0.3u#, "c" kern -0.2u#, "d" kern -0.2u#, "e" kern -0.2u#, "g" kern -0.2u#, "o" kern -0.2u#, "q" kern -0.2u#,
"n" kern -0.2u#, "m" kern -0.2u#, "p" kern -0.2u#,
"r" kern -0.2u#, "s" kern -0.2u#, "u" kern -0.2u#, "x" kern -0.2u#,
"v" kern -0.1u#, "w" kern -0.1u#, "y" kern -0.1u#, "z" kern -0.2u#;
ligtable "Y":
"A" kern -0.1u#, 
"C" kern -0.1u#, "G" kern -0.1u#, "O" kern -0.1u#, "Q" kern -0.1u#, "Z" kern +0.2u#,
"a" kern -0.4u#, "c" kern -0.3u#, "d" kern -0.3u#, "e" kern -0.3u#, "g" kern -0.3u#, "o" kern -0.3u#, "q" kern -0.3u#,
"n" kern -0.3u#, "m" kern -0.3u#, "p" kern -0.3u#,
"r" kern -0.3u#, "s" kern -0.3u#, "u" kern -0.3u#, "x" kern -0.3u#,
"v" kern -0.2u#, "w" kern -0.2u#, "y" kern -0.2u#, "z" kern -0.3u#;
ligtable "X":
"C" kern +0.0u#, "G" kern +0.0u#, "O" kern +0.0u#, "Q" kern +0.0u#,
"a" kern -0.4u#, "c" kern -0.3u#, "d" kern -0.3u#, "e" kern -0.3u#, "g" kern -0.3u#, "o" kern -0.3u#, "q" kern -0.3u#;
ligtable "Z":
"A" kern +0.2u#, "Y" kern +0.2u#;

% ligtable lower case %
ligtable "e":
"v" kern -0.0u#, "w" kern -0.0u#, "y" kern -0.0u#, "z" kern -0.0u#,
"f" kern -0.2u#, "t" kern -0.2u#;
ligtable "o":
"v" kern -0.0u#, "w" kern -0.0u#, "y" kern -0.0u#, "z" kern -0.0u#,
"f" kern -0.2u#, "t" kern -0.2u#;
ligtable "p":
"v" kern -0.0u#, "w" kern -0.0u#, "y" kern -0.0u#, "z" kern -0.0u#,
"f" kern -0.2u#, "t" kern -0.2u#;
ligtable "c":
"v" kern -0.0u#, "w" kern -0.0u#, "y" kern -0.0u#, "z" kern -0.0u#,
"f" kern -0.1u#, "t" kern -0.1u#;
ligtable "b":
"v" kern -0.0u#, "w" kern -0.0u#, "y" kern -0.0u#, "z" kern -0.0u#,
"f" kern -0.2u#, "t" kern -0.2u#;
ligtable "f":
"a" kern -0.3u#, "c" kern -0.3u#, "d" kern -0.3u#, "e" kern -0.3u#, "g" kern -0.3u#, "o" kern -0.3u#, "q" kern -0.3u#,
"j" kern -0.4u#, "f" kern -0.3u#, "t" kern -0.3u#,
"v" kern -0.1u#, "w" kern -0.1u#, "y" kern -0.1u#, "z" kern -0.1u#;
ligtable "i":
"j" kern -0.3u#;
ligtable "r":
"a" kern -0.2u#, "c" kern -0.2u#, "d" kern -0.2u#, "e" kern -0.2u#, "g" kern -0.2u#, "o" kern -0.2u#, "q" kern -0.2u#,
"j" kern -0.4u#, "f" kern -0.1u#, "t" kern -0.1u#,
"v" kern -0.0u#, "w" kern -0.0u#, "y" kern -0.0u#, "z" kern -0.0u#;
ligtable "t":
"a" kern -0.3u#, "c" kern -0.3u#, "d" kern -0.3u#, "e" kern -0.3u#, "g" kern -0.3u#, "o" kern -0.3u#, "q" kern -0.3u#,
"j" kern -0.4u#, "f" kern +0.1u#, "t" kern +0.1u#,
"v" kern -0.1u#, "w" kern -0.1u#, "y" kern -0.1u#, "z" kern -0.1u#;
ligtable "v":
"a" kern -0.0u#, "c" kern -0.0u#, "d" kern -0.0u#, "e" kern -0.0u#, "g" kern -0.0u#, "o" kern -0.0u#, "q" kern -0.0u#;
ligtable "w":
"a" kern -0.0u#, "c" kern -0.0u#, "d" kern -0.0u#, "e" kern -0.0u#, "g" kern -0.0u#, "o" kern -0.0u#, "q" kern -0.0u#;
ligtable "y":
"a" kern -0.0u#, "c" kern -0.0u#, "d" kern -0.0u#, "e" kern -0.0u#, "g" kern -0.0u#, "o" kern -0.0u#, "q" kern -0.0u#;
ligtable "x":
"a" kern -0.0u#, "c" kern -0.0u#, "d" kern -0.0u#, "e" kern -0.0u#, "g" kern -0.0u#, "o" kern -0.0u#, "q" kern -0.0u#;


% ligtable "L": "O" =: oct"014";   % USE THIS FOR LIGATURES OR SPECIAL CHARACTERS
% font_identifier:="FRAN" if slant<>0: & "SL" fi;

font_coding_scheme:="OT1";

% if known ps_output:  % presets for mf2pt1
% font_coding_scheme	"ot1";
% font_comment	"Copyright (C) 2012 MetaFlop";
% font_family	"Fontname";	
% font_fixed_pitch	false;
% font_identifier	"Fontname Light Oblique";
% font_name			"Fontname-LightOblique";
% font_size			10pt;
%font_slant		1/6;
% font_underline_position	-1pt#;
% font_underline_thickness	1/2pt#;
%font_unique_id		"4112233";
% font_version		"002.005";
% font_weight		"Light";
% fi
