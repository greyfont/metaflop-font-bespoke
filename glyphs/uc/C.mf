%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%                                                                         %%%
%%% Bespoke v1.6 – a Metaflop-Font                                          %%%
%%% © 2012 by Simon Egli, Marco Müller, Teofilo Furtado                     %%%
%%% www.metaflop.com                                                        %%%
%%%                                                                         %%%
%%% This program is free software: you can redistribute it and/or modify    %%%
%%% it under the terms of the GNU General Public License as published by    %%%
%%% the Free Software Foundation, either version 3 of the License, or       %%%
%%% (at your option) any later version.                                     %%%
%%%                                                                         %%%
%%% This program is distributed in the hope that it will be useful,         %%%
%%% but WITHOUT ANY WARRANTY; without even the implied warranty of          %%% 
%%% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the            %%% 
%%% GNU General Public License for more details.                            %%%
%%%                                                                         %%%
%%% You should have received a copy of the GNU General Public License       %%%
%%% along with this program. If not, see <http://www.gnu.org/licenses/>.    %%%
%%%                                                                         %%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%% box dimension definition %%%
beginadjchar("C",corr*6,cap#,0);


%%% sidebearings %%%

if (sidebearing=1):

numeric l,r;
normal_adjust_fit(space*0.7u#,space*0.0u#);

fi

%%% overshoot %%%
y4r=y3r=h-px +o; 		% overshoot up
y8r=y7r=px -o; 			% overshoot down
top y3=h +o; 			% overshoot up
top y4=h +o; 			% overshoot up
bot y8=0 -o; 			% overshoot down
bot y7=0 -o; 			% overshoot down

%%% construction %%%
x8r=if (incx>.5): (leftstemloc-.5(cont*px))+incx*((w-(leftstemloc-.5(cont*px)))-(leftstemloc-.5(cont*px))) else: x1r+incx*((w-x1r)-x1r) fi;
x7r=if (incx>.5): x8r else: (w-x1r)-incx*((w-x1r)-x1r) fi;
y1r=if (incy>.5): .5h else: y8r-incy*(y8r-y3r) fi;
y2r=if (incy>.5): .5h else: y3r+incy*(y8r-y3r) fi;
x8r=x3r; x7r=x4r;
x1=leftstemloc;
x6l=if (incx>.5): x8r+(x8r-x2l) else: w-leftstemloc+.5(cont*px) fi;
x6l=x5l;
y2l=y5l;
y6l=y1l;
x2=x1;
x1r=x2r=x1+(cont*px/2);
x6=x5=x6r+(px/2);
ang:=angle(z3r-z2r);

%%% penpositions %%%
penpos1(whatever,if (superness=.5): -(ang-90)/2 else: 0 fi);
penpos2(whatever,if (superness=.5): ((ang-90)/2) else: 0 fi);
penpos3(whatever,if (superness=.5): -(180-ang)/2 else: -90 fi);
penpos4(whatever,if (superness=.5): (180-ang)/2 else: -90 fi);
penpos5(whatever,if (superness=.5): -(ang-90)/2 else: 180 fi);
penpos6(whatever,if (superness=.5): (ang-90)/2 else: 180 fi);
penpos7(whatever,if (superness=.5): -(180-ang)/2 else: 90 fi);
penpos8(whatever,if (superness=.5): (180-ang)/2 else: 90 fi);

%%% draw %%%
penstroke super_qr(8e,1e)&z1e---z2e&super_ql(2e,3e);
if (incx > .5):
z100=(((w-x1l,-infinity)--(w-x1l,h+infinity)) intersectionpoint (super_ql(6l,7l)--z8l));
numeric t,u; (t,u)=(((w-x1l,-infinity)--(w-x1l,h+infinity)) intersectiontimes (super_ql(6l,7l)));
if (x4l>(w-x2l)): 
	x101=x100; else: z101=z100+whatever*(dir(angle(direction u of (super_ql(6l,7l)))+90));fi
	y101=h;
	path r; numeric t,u; (t,u)=((z100--z101) intersectiontimes (super_ql(6r,7r)));
	r = subpath (u,infinity) of (super_ql(6r,7r));
	path ss; numeric t,u; (t,u)=(((w-x1l,-infinity)--(w-x1l,h+infinity)) intersectiontimes (super_ql(6l,7l)--z8l));
	ss = subpath (infinity,u) of (super_ql(6l,7l)--z8l);
	fill ss---r---cycle;
	z99=(((w-x1l,-1)--(w-x1l,h+infinity)) intersectionpoint (z3l---super_qr(4l,5l)));
	numeric t,u; (t,u)=(((w-x1l,-infinity)--(w-x1l,h+infinity)) intersectiontimes (z3l---super_qr(4l,5l)---z5r));
if (x4l>(w-x2l)): 
	x98=x99; else: z98=z99+whatever*(dir(angle(direction u of (z3l---super_qr(4l,5l)---z5r))+90));fi
	y98=0;
	path a; numeric t,u; (t,u)=((z99--z98) intersectiontimes (z3r---super_qr(4r,5r)---z5r---z5l));
	a = subpath (0,u) of (z3r---super_qr(4r,5r)---z5r---z5l);
	path b; numeric t,u; (t,u)=(((w-x1l,-infinity)--(w-x1l,h+infinity)) intersectiontimes (z3l---super_qr(4l,5l)---z5r));
	b = subpath (u,0) of (z3l---super_qr(4l,5l)---z5r);
	fill b---z3l---z3r---a---cycle;
else:
	z100=((0,(h/2-appert*(h/2-y7)))--(infinity,(h/2-appert*(h/2-y7)))) intersectionpoint (z5l---super_ql(6l,7l)--z8l);
	path x; numeric t,u; (t,u)=((((0,(h/2-appert*(h/2-y7)))--(infinity,(h/2-appert*(h/2-y7))))) intersectiontimes (z5l---super_ql(6l,7l)--z8l));
	z101=z100+whatever*(dir(angle(direction u of (z5l---super_ql(6l,7l)--z8l))+90));
	x101=0;
	path r; numeric t,u; (t,u)=((z100--z101) intersectiontimes (z5r---super_ql(6r,7r)--z8r));
	r = subpath (u,infinity) of (z5r---super_ql(6r,7r)--z8r);
	path ss; numeric t,u; (t,u)=(((0,(h/2-appert*(h/2-y7)))--(infinity,(h/2-appert*(h/2-y7)))) intersectiontimes (z5l---super_ql(6l,7l)--z8l));
	ss = subpath (infinity,u) of (z5l---super_ql(6l,7l)--z8l);
	fill z8r---z8l---ss---r---cycle;
z99=((0,(h/2+appert*(h/2-y7)))--(infinity,(h/2+appert*(h/2-y7)))) intersectionpoint (z3l---super_qr(4l,5l)---z6l);
path x; numeric t,u; (t,u)=((((0,(h/2+appert*(h/2-y7)))--(infinity,(h/2+appert*(h/2-y7))))) intersectiontimes (z3l---super_qr(4l,5l)---z6l));
z98=z99+whatever*(dir(angle(direction u of (z3l---super_qr(4l,5l)---z6l))+90));
x98=0;
path b; numeric t,u; (t,u)=((z99--z98) intersectiontimes (z3r---super_qr(4r,5r)---z6r));
b = subpath (0,u) of (z3r---super_qr(4r,5r)---z6r);
path a; numeric t,u; (t,u)=((((0,(h/2+appert*(h/2-y7)))--(infinity,(h/2+appert*(h/2-y7))))) intersectiontimes (z3l---super_qr(4l,5l)---z6l));
a = subpath (u,0) of (z3l---super_qr(4l,5l)---z6l);
fill a---z3l---z3r---b---cycle;
w:=x100+(leftstemloc-.5(cont*px));
fi
 
% penlabels(range 1 thru 8);
% labels(range 80 thru 150);
endchar;
