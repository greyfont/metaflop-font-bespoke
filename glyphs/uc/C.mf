%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                                                         %
% Bespoke v1.7                                                            %
% a Metaflop-font © 2012 by Simon Egli, Marco Müller                      %
% thanks to Teofilo Furtado                                               %
% www.metaflop.com                                                        %
%                                                                         %
% This program is free software: you can redistribute it and/or modify    %
% it under the terms of the GNU General Public License as published by    %
% the Free Software Foundation, either version 3 of the License, or       %
% (at your option) any later version.                                     %
%                                                                         %
% This program is distributed in the hope that it will be useful,         %
% but WITHOUT ANY WARRANTY; without even the implied warranty of          % 
% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the            % 
% GNU General Public License for more details.                            %
%                                                                         %
% You should have received a copy of the GNU General Public License       %
% along with this program. If not, see <http://www.gnu.org/licenses/>.    %
%                                                                         %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


% box dimension definition %
beginadjchar("C",corr*6,cap#,0);

% sidebearings %
if (sidebearing=1):
numeric l,r;
normal_adjust_fit(space+0.25u#,space+0.0u#);
fi

% overshoot %
top y3=h+o;
top y4=h+o;
y3r=y4r=h-px+o;
bot y7=0-o;
bot y8=0-o;
y7r=y8r=px-o;

% construction %
x1=x2=leftstemloc;
x1r=x2r=x1+(cont*px/2);
x5=x6=w-x1;
x5r=x6r=x6-(cont*px/2);
x4r=x7r=(0.5*w)+(0.5*incx*w);
x3r=x8r=(0.5*w)-(0.5*incx*w);
y1r=y6r=(0.5*h)-(0.5*incy*h);
y2r=y5r=(0.5*h)+(0.5*incy*h);
ang:=angle(z6r-z7r);

% penpositions %
penpos1(whatever,0);
penpos2(whatever,0);
penpos3(whatever,90);
penpos4(whatever,90);
penpos5(whatever,180);
penpos6(whatever,180);
penpos7(whatever,-90);
penpos8(whatever,-90);

% draw %
penstroke super_qr(8e,1e)---z1e---z2e&super_ql(2e,3e);
z100=((0,0.5h-appert*0.5h)--(infinity,0.5h-appert*0.5h)) intersectionpoint (z5l---super_ql(6l,7l)--z8l);
path x; numeric t,u; (t,u)=((0,0.5h-appert*0.5h)--(infinity,0.5h-appert*0.5h)) intersectiontimes (z5l---super_ql(6l,7l)--z8l);
z101=z100+whatever*(dir(angle(direction u of (z5l---super_ql(6l,7l)--z8l))+90));
x101=0;
path r; numeric t,u; (t,u)=((z100--z101) intersectiontimes (z5r---super_ql(6r,7r)--z8r));
r = subpath (u,infinity) of (z5r---super_ql(6r,7r)--z8r);
path ss; numeric t,u; (t,u)=(((0,0.5h-appert*0.5h)--(infinity,0.5h-appert*0.5h)) intersectiontimes (z5l---super_ql(6l,7l)--z8l));
ss = subpath (infinity,u) of (z5l---super_ql(6l,7l)--z8l);
fill z8r---z8l---ss---r---cycle;

z99=((0,0.5h+appert*0.5h)--(infinity,0.5h+appert*0.5h)) intersectionpoint (z3l---super_qr(4l,5l)---z6l);
path x; numeric t,u; (t,u)=((0,0.5h+appert*0.5h)--(infinity,0.5h+appert*0.5h)) intersectiontimes (z3l---super_qr(4l,5l)---z6l);
	
z98=z99+whatever*(dir(angle(direction u of (z3l---super_qr(4l,5l)---z6l))+90));
x98=0;
path b; numeric t,u; (t,u)=((z99--z98) intersectiontimes (z3r---super_qr(4r,5r)---z6r));
b = subpath (0,u) of (z3r---super_qr(4r,5r)---z6r);
path a; numeric t,u; (t,u)=(((0,0.5h+appert*0.5h)--(infinity,0.5h+appert*0.5h)) intersectiontimes (z3l---super_qr(4l,5l)---z6l));
a = subpath (u,0) of (z3l---super_qr(4l,5l)---z6l);
fill a---z3l---z3r---b---cycle;
w:=x100+(leftstemloc-.5(cont*px));

% penlabels(range 1 thru 150);
endchar;
