%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%                                                                         %%%
%%% Transit v1.6 ¿ a Metaflop-Font                                          %%%
%%% © 2012 by Simon Egli, Marco Müller, Teofilo Furtado                     %%%
%%% www.metaflop.com                                                        %%%
%%%                                                                         %%%
%%% This program is free software: you can redistribute it and/or modify    %%%
%%% it under the terms of the GNU General Public License as published by    %%%
%%% the Free Software Foundation, either version 3 of the License, or       %%%
%%% (at your option) any later version.                                     %%%
%%%                                                                         %%%
%%% This program is distributed in the hope that it will be useful,         %%%
%%% but WITHOUT ANY WARRANTY; without even the implied warranty of          %%% 
%%% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the            %%% 
%%% GNU General Public License for more details.                            %%%
%%%                                                                         %%%
%%% You should have received a copy of the GNU General Public License       %%%
%%% along with this program. If not, see <http://www.gnu.org/licenses/>.    %%%
%%%                                                                         %%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%% box dimension definition %%%
beginadjchar("R",corr*4.5,cap#,0);

%%% sidebearings %%%
numeric l,r;
normal_adjust_fit(1.1u#,0.5u#);

%%% construction %%%
x11=x22=leftstemloc;
x11r=x22r=x11+(cont*px/2);
y11=0;
y22=h;
x14r=x13r-incx*(x13r-x11r);
y12r=y10r+incy*(px-(h-px));
y13r=y14r-incy*(px-(h-px));
y10r=h-px=y9r;
y14r=y8r=y14+.5px;
y14=bar*h;
% y14=(bar-.1)*h;
if (y12r<y10r+.5(y14r-y10r)): y12r:=y10r+.5(y14r-y10r); fi
if (y13r>y10r+.5(y14r-y10r)): y13r:=y14r-.5(y14r-y10r); fi
x14r=x10r;
top y10=h;
y14=y8;
y9=y10;
x8=x11;
x13=w-x11;%- if (bar>.5): (1/10)*(bar*h) else: 0 fi;
x13=x12;
x9=x8;
x13r=x12r=x13-(cont*px/2);
x1l=x11l;%leftstemloc-cont*px/2;
x2r=w-x11l;
if (incx>.5): y1=h-incx*(h-bar*h); else: y1=h; fi;
y2=0;
ang:=angle(z13r-z14r);

%%% penpositions %%%
penpos11(whatever,0);
penpos22(whatever,0);
penpos8(whatever,-90);
penpos9(whatever,90);
penpos10(whatever,if (superness=.5): (180-ang)/2 else: -90 fi);
penpos12(whatever,if (superness=.5): -(ang-90)/2 else: 180 fi);
penpos13(whatever,if (superness=.5): (ang-90)/2 else: 180 fi);
penpos14(whatever,if (superness=.5): -(180-ang)/2 else: 90 fi);
alphar1=diag_ratio(1,cont*px,if (incx>.5): h-incx*(h-bar*h) else: h fi,x2r-x1l);
penpos1(alphar1*cont*px,0);
penpos2(alphar1*cont*px,0);

%%% draw %%%
penstroke z11e---z22e;
penstroke z9e---super_qr(10e,12e)---super_ql(13e,14e)--z8e;
path ci; ci = super_ql(13l,14l)--z8l;
path dl; dl = z2l---z1l;
path dr; dr = z2r---z1r;
path rl; numeric t,u; (t,u)=(ci intersectiontimes dl);
rl = subpath (u,0) of dl;
path rr; numeric t,u; (t,u)=(ci intersectiontimes dr);
rr = subpath (0,u) of dr;
fill rr---rl---cycle;

% penlabels(range 1 thru 30);

endchar;
