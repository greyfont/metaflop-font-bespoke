%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%                                                                         %%%
%%% Transit v1.6 – a Metaflop-Font                                          %%%
%%% © 2012 by Simon Egli, Marco Müller, Teofilo Furtado                     %%%
%%% www.metaflop.com                                                        %%%
%%%                                                                         %%%
%%% This program is free software: you can redistribute it and/or modify    %%%
%%% it under the terms of the GNU General Public License as published by    %%%
%%% the Free Software Foundation, either version 3 of the License, or       %%%
%%% (at your option) any later version.                                     %%%
%%%                                                                         %%%
%%% This program is distributed in the hope that it will be useful,         %%%
%%% but WITHOUT ANY WARRANTY; without even the implied warranty of          %%% 
%%% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the            %%% 
%%% GNU General Public License for more details.                            %%%
%%%                                                                         %%%
%%% You should have received a copy of the GNU General Public License       %%%
%%% along with this program. If not, see <http://www.gnu.org/licenses/>.    %%%
%%%                                                                         %%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%% box dimension definition %%%
beginadjchar("a",3.75,mean#,0);

%%% sidebearings %%%
numeric l,r;
normal_adjust_fit(0.3u#,0.5u#);

%%% overshoot %%%
y8r=y7r=px -o;  % overhoot down
bot y8=0 -o; % overshoot down
bot y7=0 -o; % overshoot down
top y11=h +o; % overshoot up
top y12=h +o; % overshoot up

%%% construction %%%

%%% lower octagon %%%
x8r=if (incx>.5): .5w else: x1r+incx*(x6r-x1r) fi;
x7r=if (incx>.5): .5w else: x6r-incx*(x6r-x1r) fi;
x8r=x3r; x7r=x4r;
y4r=y3r=1.1bar*h-px;  % extra 1.1 for bar
top y3=1.1bar*h;   % extra 1.1 for bar
top y4=1.1bar*h;   % extra 1.1 for bar
x1=leftstemloc;
x6=w-(leftstemloc+.5(cont*px)-.5px);
x6=x5=x25;  % x25 added
y5r=(y3r+px)-incy*(y8r-y3r);
x5r=x5+(px/2-2*epsilon);
y6r=y1r;
y25r=y2r;  % new
x2=x1;
x1r=x2r=x1+(cont*px/2);
x6r=x25r=x6-(px/2);  % y15 added
y1r=if (incy>.5): .5bar*h else: y8r-incy*(y8r-y3r) fi; %left pair
y2r=if (incy>.5): .5bar*h else: y3r+incy*(y8r-y3r) fi;
%y15r=if (incy>.5): .5bar*h else: y8r-incy*(y8r-y3r) fi; % right pair
%y6r=if (incy>.5): .5bar*h else: y3r+incy*(y8r-y3r) fi;
ang:=angle(z6r-z7r);

%%% stem and upper curve %%%
x9r= if (incx>.5): x12r-((w-(leftstemloc-.5(px*cont)+.5px))-x12r) else: leftstemloc-.5(cont*px)+px fi;
x11r=if (incx>.5): x12r else: (leftstemloc+.5(cont*px))+incx*(x14r-(leftstemloc+.5(cont*px))) fi;
y12r=y11r=h-px +o; % overshoot up 
if (h>w):y10r=y11r-(incy*(w-(2*leftstemloc-(cont*px)))) else: y10r=y11r+incy*(px-y11r) fi;
if (y10r<h-(.5w-(leftstemloc-.5(cont*px)))): y10r:=2/3h; fi;
x12r=x14r-incx*(x14r-(leftstemloc+.5(cont*px)));
x14=w-leftstemloc;
x14=x13;
y10r=y13r;
x10=x9;
x9r=x10r=x9+(px/2);
y14r=y9r=0;
x14r=x13r=x14-(cont*px/2);
y4r=y15r;
y4l=y15l;
x15l=x15r=x14l;
ang:=angle(z11r-z10r);

%%% penpositions %%%
penpos1(whatever,if (superness=.5): -(ang-90)/2 else: 0 fi);
penpos2(whatever,if (superness=.5): ((ang-90)/2) else: 0 fi);
penpos3(whatever,if (superness=.5): -(180-ang)/2 else: -90 fi);
penpos4(whatever,if (superness=.5): -(180-ang)/2 else: -90 fi);
penpos5(whatever,if (superness=.5): (ang-90)/2 else: 0 fi);
penpos6(whatever,if (superness=.5): (ang-90)/2 else: 180 fi);
penpos25(whatever,if (superness=.5): (ang-90)/2 else: 180 fi);
penpos7(whatever,if (superness=.5): -(180-ang)/2 else: 90 fi);
penpos8(whatever,if (superness=.5): (180-ang)/2 else: 90 fi);
penstroke super_ql(6e,7e)---super_qr(8e,1e)---super_ql(2e,3e)---super_qr(4e,25e)---z6e;  % new bowl
penpos9(whatever,0);
penpos10(whatever,if (superness=.5): ((ang-90)/2) else: 0 fi);
penpos11(whatever,if (superness=.5): -(180-ang)/2 else: -90 fi);
penpos12(whatever,if (superness=.5): (180-ang)/2 else: -90 fi);
penpos13(whatever,if (superness=.5): (angle(z13r-z12r)+90)/2 else: 180 fi);
penpos14(whatever,180);

%%% draw %%%
penstroke z11e---super_qr(12e,13e)---z14e;
% penstroke z4e---z15e;  % old straight bowl top
if (incx>.5):
	path tl; tl = z9l---super_ql(10l,11l);
	path ap; ap = (leftstemloc-.5(cont*px)+.5px,infinity)---(leftstemloc-.5(cont*px)+.5px,-infinity);
	path v; v = z9r---super_ql(10r,11r);
	z100=ap intersectionpoint tl;
	numeric t,u; (t,u)=ap intersectiontimes tl;
if (x4l>(w-x2l)): 
	x101=x100; else: z101=z100+whatever*(dir(angle(direction u of tl)+90));fi
	y101=0;
	path r; numeric t,u; (t,u)=((z100--z101) intersectiontimes (v));
	r = subpath (u,infinity) of (v);
	path ss; numeric t,u; (t,u)=(ap intersectiontimes tl);
	ss = subpath (infinity,u) of tl;
	fill ss---r---cycle;
else:
	path tl; tl = z9l---super_ql(10l,11l);
	path ap; ap = (0,y3l-appert*(y3l-y11r))---(w,y3l-appert*(y3l-y11r));
	path v; v = z9r---super_ql(10r,11r);
	z100=ap intersectionpoint tl;
	path x; numeric t,u; (t,u)=ap intersectiontimes tl;
	z101=z100+whatever*(dir(angle(direction u of tl)+90));
	x101=w;
	path r; numeric t,u; (t,u)=((z100--z101) intersectiontimes v);
	r = subpath (u,infinity) of v;
	path ss; numeric t,u; (t,u)=(ap intersectiontimes tl);
	ss = subpath (infinity,u) of tl;
	fill ss---r---cycle;fi

% penlabels(range 1 thru 80);

endchar;