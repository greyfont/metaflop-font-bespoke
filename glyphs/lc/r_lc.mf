%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%                                                                         %%%
%%% Bespoke v1.6 – a Metaflop-Font                                          %%%
%%% © 2012 by Simon Egli, Marco Müller, Teofilo Furtado                     %%%
%%% www.metaflop.com                                                        %%%
%%%                                                                         %%%
%%% This program is free software: you can redistribute it and/or modify    %%%
%%% it under the terms of the GNU General Public License as published by    %%%
%%% the Free Software Foundation, either version 3 of the License, or       %%%
%%% (at your option) any later version.                                     %%%
%%%                                                                         %%%
%%% This program is distributed in the hope that it will be useful,         %%%
%%% but WITHOUT ANY WARRANTY; without even the implied warranty of          %%% 
%%% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the            %%% 
%%% GNU General Public License for more details.                            %%%
%%%                                                                         %%%
%%% You should have received a copy of the GNU General Public License       %%%
%%% along with this program. If not, see <http://www.gnu.org/licenses/>.    %%%
%%%                                                                         %%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%% box dimension definition %%%
beginadjchar("r",corr*3.5,mean#,0);

%%% sidebearings %%%
if (sidebearing=1):
numeric l,r;
normal_adjust_fit(space+0.4u#,space-0.1u#);
fi

%%% overshoot %%%
y5r=y4r=h-px +o; % overshoot up
top y4=h +o; % overshoot up
top y5=h +o; % overshoot up

%%% construction %%%
x7r= 
if (incx>.5): 
	x5r+(x5r-x3r) 
else: 
	w-(leftstemloc+.5(cont*px)) fi;
x4r=
if (incx>.5): 
	x5r
else: 
	((w-(leftstemloc+.5(cont*px))))-incx*((w-(leftstemloc+.5(cont*px)))-x2r) fi;
if (h>w):
	y6r=y4r-(incy*(w-(leftstemloc-.5(cont*px)))) 
else: 
	y6r=y4r+incy*(px-y4r) fi;
if (y6r<h-(.5w-(leftstemloc-.5(cont*px)))): 
	y6r:=5/8h; fi;
x5r=x2r+incx*((w-(leftstemloc+.5(cont*px)))-x2r);
x2=leftstemloc;
x3=x3r-.5px;
y6r=y3r;
x6=x7;
x7r=x6r=x7-((cont*px)/2);
y2r=y7r=0;
x2r=x3r=x2+(cont*px/2);
x1=x2; y1=h;
ang:=(angle(z5r-z3r));

%%% penpositions %%%
penpos7(whatever,0);
penpos6(whatever,if (superness=.5): -((ang-90)/2) else: 0 fi);
penpos4(whatever,if (superness=.5): (180-ang)/2 else: -90 fi);
penpos5(whatever,if (superness=.5): -(180-ang)/2 else: -90 fi);
penpos3(whatever,if (superness=.5): (ang-90)/2 else: 180 fi);
penpos2(whatever,0);
penpos1(cont*px,0);

%%% draw %%%
penstroke z4e---super_qr(5e,3e)---z2e;
penstroke z1e---z2e;
if (incx>.5):
	path tl; tl = z7l---super_ql(6l,4l);
	path ap; ap = (w-(leftstemloc-.5(cont*px)),infinity)---(w-(leftstemloc-.5(cont*px)),-infinity);
	path v; v = z7r---super_ql(6r,4r);
	z100=ap intersectionpoint tl;
	numeric t,u; (t,u)=ap intersectiontimes tl;
	z101=z100+whatever*(dir(angle(direction u of tl)+90));
	y101=0;
	path r; numeric t,u; (t,u)=((z100--z101) intersectiontimes (v));
	r = subpath (u,infinity) of (v);
	path ss; numeric t,u; (t,u)=(ap intersectiontimes tl);
	ss = subpath (infinity,u) of tl;
	fill ss---r---cycle;
else:
	path tl; tl = z7l---super_ql(6l,4l);
	path ap; ap = (0,.5h-appert*(.4h-y4r))---(w,.5h-appert*(.4h-y4r));   % .4h for amount of cutting up upper curve (change to multiplication)
	path v; v = z7r---super_ql(6r,4r);
	z100=ap intersectionpoint tl;
	path x; numeric t,u; (t,u)=ap intersectiontimes tl;
	z101=z100+whatever*(dir(angle(direction u of tl)+90));
	x101=0;
	path r; numeric t,u; (t,u)=((z100--z101) intersectiontimes v);
	r = subpath (u,infinity) of v;
	path ss; numeric t,u; (t,u)=(ap intersectiontimes tl);
	ss = subpath (infinity,u) of tl;
	fill ss---r---cycle;fi

% penlabels(range 1 thru 80);

endchar;
