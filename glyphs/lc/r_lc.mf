%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%                                                                         %%%
%%% Bespoke v1.6 – a Metaflop-Font                                          %%%
%%% © 2012 by Simon Egli, Marco Müller, Teofilo Furtado                     %%%
%%% www.metaflop.com                                                        %%%
%%%                                                                         %%%
%%% This program is free software: you can redistribute it and/or modify    %%%
%%% it under the terms of the GNU General Public License as published by    %%%
%%% the Free Software Foundation, either version 3 of the License, or       %%%
%%% (at your option) any later version.                                     %%%
%%%                                                                         %%%
%%% This program is distributed in the hope that it will be useful,         %%%
%%% but WITHOUT ANY WARRANTY; without even the implied warranty of          %%% 
%%% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the            %%% 
%%% GNU General Public License for more details.                            %%%
%%%                                                                         %%%
%%% You should have received a copy of the GNU General Public License       %%%
%%% along with this program. If not, see <http://www.gnu.org/licenses/>.    %%%
%%%                                                                         %%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%% box dimension definition %%%
beginadjchar("r",corr*3.5,mean#,0);

%%% sidebearings %%%
if (sidebearing=1):
numeric l,r;
normal_adjust_fit(space+0.4u#,space-0.1u#);
fi

%%% overshoot %%%
y12r=y11r=h-px +o; % overshoot up
top y11=h +o; % overshoot up
top y12=h +o; % overshoot up

%%% construction %%%
x9r= if (incx>.5): x12r+(x12r-x13r) else: w-(leftstemloc+.5(cont*px)) fi;
x11r=if (incx>.5): x12r else: ((w-(leftstemloc+.5(cont*px))))-incx*((w-(leftstemloc+.5(cont*px)))-x14r) fi;
if (h>w):
	y10r=y11r-(incy*(w-(leftstemloc-.5(cont*px)))) 
else: 
	y10r=y11r+incy*(px-y11r) fi;
if (y10r<h-(.5w-(leftstemloc-.5(cont*px)))): 
	y10r:=5/8h; fi;
x12r=x14r+incx*((w-(leftstemloc+.5(cont*px)))-x14r);
x14=leftstemloc;
x13=x13r-.5px;
y10r=y13r;
x10=x9;
x9r=x10r=x9-((cont*px)/2);
y14r=y9r=0;
x14r=x13r=x14+(cont*px/2);
x15=x14; y15=h;
ang:=(angle(z12r-z13r));

%%% penpositions %%%
penpos9(whatever,0);
penpos10(whatever,if (superness=.5): -((ang-90)/2) else: 0 fi);
penpos11(whatever,if (superness=.5): (180-ang)/2 else: -90 fi);
penpos12(whatever,if (superness=.5): -(180-ang)/2 else: -90 fi);
penpos13(whatever,if (superness=.5): (ang-90)/2 else: 180 fi);
penpos14(whatever,0);
penpos15(cont*px,0);

%%% draw %%%
penstroke z11e---super_qr(12e,13e)---z14e;
penstroke z15e---z14e;
if (incx>.5):
	path tl; tl = z9l---super_ql(10l,11l);
	path ap; ap = (w-(leftstemloc-.5(cont*px)),infinity)---(w-(leftstemloc-.5(cont*px)),-infinity);
	path v; v = z9r---super_ql(10r,11r);
	z100=ap intersectionpoint tl;
	numeric t,u; (t,u)=ap intersectiontimes tl;
	z101=z100+whatever*(dir(angle(direction u of tl)+90));
	y101=0;
	path r; numeric t,u; (t,u)=((z100--z101) intersectiontimes (v));
	r = subpath (u,infinity) of (v);
	path ss; numeric t,u; (t,u)=(ap intersectiontimes tl);
	ss = subpath (infinity,u) of tl;
	fill ss---r---cycle;
else:
	path tl; tl = z9l---super_ql(10l,11l);
	path ap; ap = (0,.5h-appert*(.4h-y11r))---(w,.5h-appert*(.4h-y11r));   % .4h for amount of cutting up upper curve (change to multiplication)
	path v; v = z9r---super_ql(10r,11r);
	z100=ap intersectionpoint tl;
	path x; numeric t,u; (t,u)=ap intersectiontimes tl;
	z101=z100+whatever*(dir(angle(direction u of tl)+90));
	x101=0;
	path r; numeric t,u; (t,u)=((z100--z101) intersectiontimes v);
	r = subpath (u,infinity) of v;
	path ss; numeric t,u; (t,u)=(ap intersectiontimes tl);
	ss = subpath (infinity,u) of tl;
	fill ss---r---cycle;fi

% penlabels(range 1 thru 80);

endchar;
