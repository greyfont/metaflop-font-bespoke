%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                                                         %
% Bespoke v1.7                                                            %
% a Metaflop-font © 2012 by Simon Egli, Marco Müller                      %
% thanks to Teofilo Furtado                                               %
% www.metaflop.com                                                        %
%                                                                         %
% This program is free software: you can redistribute it and/or modify    %
% it under the terms of the GNU General Public License as published by    %
% the Free Software Foundation, either version 3 of the License, or       %
% (at your option) any later version.                                     %
%                                                                         %
% This program is distributed in the hope that it will be useful,         %
% but WITHOUT ANY WARRANTY; without even the implied warranty of          % 
% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the            % 
% GNU General Public License for more details.                            %
%                                                                         %
% You should have received a copy of the GNU General Public License       %
% along with this program. If not, see <http://www.gnu.org/licenses/>.    %
%                                                                         %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


% box dimension definition %
beginadjchar("j",3,asc#,des#);

% sidebearings %
if (sidebearing=1):
numeric l,r;
normal_adjust_fit(space-0.6u#,space+0.45u#);
fi

% overshoot %
bot y8=-d-o;
bot y7=-d-o;
y8r=y7r=-d+px-o;
x13-x12=1.2*cont*px+o;
y11-y10=1.2*cont*px+o;

% construction %
x1=x2=leftstemloc;
x1r=x2r=x1+(cont*px/2);
x3=x6=x10=x11=w-x1;
x3r=x6r=w-x1r;
x10=.5(x12+x13);
x7r=x2r+0.5*(x6r-x2r)+0.5*incx*(x6r-x2r);
x8r=x2r+0.5*(x6r-x2r)-0.5*incx*(x6r-x2r);
y11=h;
y1=y3=mean;
y2r=y6r=(-d+px)+2/8((mean-px)-px);
y13=y12=.5(y11+y10);
ang:=angle(z6r-z7r);

% penpositions %
penpos1(whatever,0);
penpos2(whatever,0);
penpos3(whatever,180);
penpos6(whatever,180);
penpos7(whatever,90);
penpos8(whatever,90);

% draw %
fill super_qr(11,12)---super_ql(12,10)---super_qr(10,13)---super_ql(13,11)---cycle;
penstroke z3e---super_ql(6e,7e);

z100=((-infinity,((-d+mean/2)-appert*((-d+mean/2)-y7)))--(infinity,((-d+mean/2)-appert*((-d+mean/2)-y7)))) intersectionpoint (super_qr(8l,2l)---z1l);
path x; numeric t,u; (t,u)=((((-infinity,((-d+mean/2)-appert*((-d+mean/2)-y7)))--(infinity,((-d+mean/2)-appert*((-d+mean/2)-y7))))) intersectiontimes (super_qr(8l,2l)---z1l));
z101=z100+whatever*(dir(angle(direction u of (super_qr(8l,2l)---z1l))+90));
x101=w;
path r; numeric t,u; (t,u)=((z100--z101) intersectiontimes (super_qr(8r,2r)---z1r));
r = subpath (u,0) of (super_qr(8r,2r)---z1r);
path ss; numeric t,u; (t,u)=(((0,((-d+mean/2)-appert*((-d+mean/2)-y7)))--(infinity,((-d+mean/2)-appert*((-d+mean/2)-y7)))) intersectiontimes (super_qr(8l,2l)---z1l));
ss = subpath (0,u) of (super_qr(8l,2l)---z1l);
fill ss---r---z7r---z7l---cycle;

% penlabels (range 1 thru 200);

endchar;
