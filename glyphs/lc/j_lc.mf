%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%                                                                         %%%
%%% Bespoke v1.6 – a Metaflop-Font                                          %%%
%%% © 2012 by Simon Egli, Marco Müller, Teofilo Furtado                     %%%
%%% www.metaflop.com                                                        %%%
%%%                                                                         %%%
%%% This program is free software: you can redistribute it and/or modify    %%%
%%% it under the terms of the GNU General Public License as published by    %%%
%%% the Free Software Foundation, either version 3 of the License, or       %%%
%%% (at your option) any later version.                                     %%%
%%%                                                                         %%%
%%% This program is distributed in the hope that it will be useful,         %%%
%%% but WITHOUT ANY WARRANTY; without even the implied warranty of          %%% 
%%% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the            %%% 
%%% GNU General Public License for more details.                            %%%
%%%                                                                         %%%
%%% You should have received a copy of the GNU General Public License       %%%
%%% along with this program. If not, see <http://www.gnu.org/licenses/>.    %%%
%%%                                                                         %%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%% box dimension definition %%%
beginadjchar("j",corr*2.5,asc#,des#);

%%% sidebearings %%%
if (sidebearing=1):
numeric l,r;
normal_adjust_fit(space-0.6u#,space+0.45u#);
fi

%%% overshoot %%%
y8r=y7r=-d+px -o; % overshoot down
bot y8=-d -o; % overshoot down
bot y7=-d -o; % overshoot down

%%% construction %%%
x7r=if (incx>.5): w-incx*(w) else: x6r-incx*((x6r-(w-x6r))) fi;
x8r=if (incx>.5): x7r else: (w-x6r)+incx*(x6r-(w-x6r)) fi;
y1r=(-d+px)+incy*((mean-px)-px);
if (y1r>(-d+px)+1.5/8((mean-px)-px)): y1r:=(-d+px)+1.5/8((mean-px)-px); fi %+x/8 mean -> position tangent point of stem
x1=if (incx>.5): x7r-((w-(leftstemloc-.5(px*cont)+.5px))-x7r) else: leftstemloc-.5(px*cont)+.5px fi;
y2=y3=mean;
x2=x1=x2l+.5px;
x3=x6=x3l-.5(cont*px);
x6=w-0.75*leftstemloc; % width of curve
y6r=y1r;
x1r=x1+(px/2);
x6r=x6-(cont*px/2);
y4=y5;
x11=x10=x3;
y11-y10=1.2*cont*px+o; % i punkt
y11=h;
x10=.5(x12+x13);
x12-x13=1.2*cont*px+o; % i punkt
y12=y13=.5(y11+y10);
ang:=angle(z6r-z7r);


penpos1(whatever,if (superness=.5): -(ang-90)/2 else: 0 fi);
penpos2(whatever,0);
penpos3(whatever,180);
penpos6(whatever,if (superness=.5): (ang-90)/2 else: 180 fi);
penpos7(whatever,if (superness=.5): -(180-ang)/2 else: 90 fi);
penpos8(whatever,if (superness=.5): (180-ang)/2 else: 90 fi);
penpos4(px,90);
penpos5(px,90);

penstroke z3e---super_ql(6e,7e);
fill super_qr(11,12)---super_ql(12,10)---super_qr(10,13)---super_ql(13,11)---cycle;
if (incx > .5):
	z100=((((leftstemloc-.5(cont*px)),-infinity)--((leftstemloc-.5(cont*px)),mean+infinity)) intersectionpoint (super_ql(6l,7l)---super_qr(8l,1l)));
	numeric t,u; (t,u)=((((leftstemloc-.5(cont*px)),-infinity)--((leftstemloc-.5(cont*px)),mean+infinity)) intersectiontimes (super_ql(6l,7l)---z7l---super_qr(8l,1l)));
if (x8l<leftstemloc-.5(cont*px)): 
	x101=x100; else: z101=z100+whatever*(dir(angle(direction u of (super_ql(6l,7l)---z7l---super_qr(8l,1l)))-90));fi
	y101=mean;
	path r; numeric t,u; (t,u)=((z100--z101) intersectiontimes (super_qr(8r,1r)---z1l));
	r = subpath (0,u) of (super_qr(8r,1r)---z1l);
	path ss; numeric t,u; (t,u)=((((leftstemloc-.5(cont*px)),-infinity)--((leftstemloc-.5(cont*px)),mean+infinity)) intersectiontimes (super_ql(6l,7l)---z7l---super_qr(8l,1l)));
	ss = subpath (u,0) of (super_ql(6l,7l)---z7l---super_qr(8l,1l));
	fill ss---super_ql(6r,7r)---r---cycle;
else:
	z100=((-infinity,((-d+mean/2)-appert*((-d+mean/2)-y7)))--(infinity,((-d+mean/2)-appert*((-d+mean/2)-y7)))) intersectionpoint (super_qr(8l,1l)---z2l);
	path x; numeric t,u; (t,u)=((((-infinity,((-d+mean/2)-appert*((-d+mean/2)-y7)))--(infinity,((-d+mean/2)-appert*((-d+mean/2)-y7))))) intersectiontimes (super_qr(8l,1l)---z2l));
	z101=z100+whatever*(dir(angle(direction u of (super_qr(8l,1l)---z2l))+90));
	x101=w;
	path r; numeric t,u; (t,u)=((z100--z101) intersectiontimes (super_qr(8r,1r)---z2r));
	r = subpath (u,0) of (super_qr(8r,1r)---z2r);
	path ss; numeric t,u; (t,u)=(((0,((-d+mean/2)-appert*((-d+mean/2)-y7)))--(infinity,((-d+mean/2)-appert*((-d+mean/2)-y7)))) intersectiontimes (super_qr(8l,1l)---z2l));
	ss = subpath (0,u) of (super_qr(8l,1l)---z2l);
	fill ss---r---z7r---z7l---cycle;fi

% penlabels (range 1 thru 200);

endchar;
