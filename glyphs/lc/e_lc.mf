%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%                                                                         %%%
%%% Bespoke v1.6 – a Metaflop-Font                                          %%%
%%% © 2012 by Simon Egli, Marco Müller, Teofilo Furtado                     %%%
%%% www.metaflop.com                                                        %%%
%%%                                                                         %%%
%%% This program is free software: you can redistribute it and/or modify    %%%
%%% it under the terms of the GNU General Public License as published by    %%%
%%% the Free Software Foundation, either version 3 of the License, or       %%%
%%% (at your option) any later version.                                     %%%
%%%                                                                         %%%
%%% This program is distributed in the hope that it will be useful,         %%%
%%% but WITHOUT ANY WARRANTY; without even the implied warranty of          %%% 
%%% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the            %%% 
%%% GNU General Public License for more details.                            %%%
%%%                                                                         %%%
%%% You should have received a copy of the GNU General Public License       %%%
%%% along with this program. If not, see <http://www.gnu.org/licenses/>.    %%%
%%%                                                                         %%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%% box dimension definition %%%
beginadjchar("e",4.4,mean#,0);

%%% sidebearings %%%
if (sidebearing=1):
numeric l,r;
normal_adjust_fit(space+0.5u#,space+0.5u#);
fi

%%% overshoot %%%
y4r=y3r=h-px +o; % overshoot up
y8r=y7r=px -o; % overshoot down
top y3=h +o;  % overshoot up
top y4=h +o; % overshoot up
bot y8=0 -o; % overshoot down
bot y7=0 -o; % overshoot down

%%% construction %%%
x8r=if (incx>.5): (leftstemloc-.5(px*cont))+incx*((w-(leftstemloc-.5(px*cont)))-(leftstemloc-.5(px*cont))) else: x1r+incx*((w-x1r)-x1r) fi;
x7r=if (incx>.5): x8r else: (w-x1r)-incx*((w-x1r)-x1r) fi;
y1r=if (incy>.5): .5h else: y8r-incy*(y8r-y3r) fi;
y2r=if (incy>.5): .5h else: y3r+incy*(y8r-y3r) fi;
x4r=if (incx>.5): .5w else: (w-x1r)-incx*((w-x1r)-x1r) fi;
x3r=if (incx>.5): .5w else: x1r+incx*((w-x1r)-x1r) fi;
x1=leftstemloc;
x6r=if (incx>.5): x8r+(x8r-(leftstemloc-.5(cont*px)+px)) else: w-leftstemloc+.5(cont*px)-px fi;
x5r=w-(leftstemloc+(cont*px)/2);
y2r=y5r;
y6r=y1r;
x2=x1;
x1r=x2r=x1+(cont*px/2);
x6=x6r+(px/2);
x5=x11=x5r+(cont*px)/2;
y11=0;
y12=h;
x12=x6;
x9=x2l; x10=w;
y9=y10=y8r+bar*(y3r-y8r);
ang:=angle(z3r-z2r);

%%% penpositions %%%
penpos1(whatever,if (superness=.5): -(angle(z6r-z7r)-90)/2 else: 0 fi);
penpos2(whatever,if (superness=.5): ((ang-90)/2) else: 0 fi);
penpos3(whatever,if (superness=.5): -(180-ang)/2 else: -90 fi);
penpos4(whatever,if (superness=.5): (180-ang)/2 else: -90 fi);
penpos5(whatever,if (superness=.5): -(ang-90)/2 else: 180 fi);
penpos6(whatever,if (superness=.5): (angle(z6r-z7r)-90)/2 else: 180 fi);
penpos7(whatever,if (superness=.5): -(180-angle(z6r-z7r))/2 else: 90 fi);
penpos8(whatever,if (superness=.5): (180-angle(z6r-z7r))/2 else: 90 fi);
penpos9(px,90);
penpos10(px,90);
penpos11(cont*px,180);
penpos12(px,180);

%%% draw %%%
penstroke super_qr(8e,1e)---super_ql(2e,3e)---z4e;
path g; g= super_qr(8,1)---super_ql(2,3);
path b; b=z9l---z10l;
path c; c=super_qr(4l,5l)---z11l;
path br; br=z9r---z10r;
path cr; cr=super_qr(4r,5r)---z11r;
path l; numeric t,u; (t,u)=(b intersectiontimes c);
l = subpath (0,u) of c;
path r; numeric t,u; (t,u)=(b intersectiontimes cr);
r = subpath (u,0) of cr;
fill r---l---cycle;
z33=br intersectionpoint cr;
z34=b intersectionpoint c;
z35=br intersectionpoint g;
z36=b intersectionpoint g;
fill z34---z33---z35---z36---cycle;
if (incx > .5):
	z100=(((w-x1l,-infinity)--(w-x1l,h+infinity)) intersectionpoint (super_ql(6l,7l)--z8l));
	numeric t,u; (t,u)=(((w-x1l,-infinity)--(w-x1l,h+infinity)) intersectiontimes (super_ql(6l,7l)));
if (x4l>(w-x2l)): 
	x101=x100; else: z101=z100+whatever*(dir(angle(direction u of (super_ql(6l,7l)))+90));fi
	y101=y10l;
	path r; numeric t,u; (t,u)=((z100--z101) intersectiontimes (super_ql(6r,7r)));
	r = subpath (u,infinity) of (super_ql(6r,7r));
	path ss; numeric t,u; (t,u)=(((w-x1l,-infinity)--(w-x1l,h+infinity)) intersectiontimes (super_ql(6l,7l)--z8l));
	ss = subpath (infinity,u) of (super_ql(6l,7l)--z8l);
	fill ss---r---cycle;
else:
if (y34<(h/2-(appert*(h/2-y7r)-px))): 
	y88:=y34-px; else: y88:=(h/2-appert*(h/2-y7r)) fi;
	path k; k=(z12l---super_ql(6l,7l)--z8l);
	path kr; kr=(z12r---super_ql(6r,7r)--z8r);
	z100=((0,y88)--(infinity,y88)) intersectionpoint k;
	path x; numeric t,u; (t,u)=((((0,y88)--(infinity,y88))) intersectiontimes k);
	z101=z100+whatever*(dir(angle(direction u of k)+90));
	x101=0;
	path r; numeric t,u; (t,u)=((z100--z101) intersectiontimes kr);
	r = subpath (u,infinity) of kr;
	path ss; numeric t,u; (t,u)=(((0,y88)--(infinity,y88)) intersectiontimes k);
	ss = subpath (infinity,u) of k;
	fill z8r---z8l---ss---r---cycle;fi

% penlabels(range 1 thru 100);

endchar;
